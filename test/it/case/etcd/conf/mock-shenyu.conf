# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

worker_processes  1;
daemon off;
error_log /dev/stdout debug;

events {
    worker_connections 1024;
}

env APP_NAME;
env ETCD_SERVER_URL;

http {
    server {
        listen 9090;
        location ~ /get {
            content_by_lua_block {
                ngx.say(ngx.var.server_addr)
            }
        }

        location = /register {
            content_by_lua_block {
                local json = require("cjson.safe")
                local httpc = require("resty.http").new()
                local encode = ngx.encode_base64
                httpc:request_uri(os.getenv("ETCD_SERVER_URL") .. "/v3/kv/put", {
                    method = "POST",
                    body = json.encode({
                        key = encode("/shenyu/register/instance/" .. ngx.var.server_addr .. ":9090"),
                        value = encode(json.encode({
                            host = ngx.var.server_addr,
                            port = 9090,
                            appName = os.getenv("APP_NAME"),
                        })),
                    }),
                })
                ngx.say("register successful")
            }
        }

        location = /unregister {
            content_by_lua_block {
                local json = require("cjson.safe")
                local httpc = require("resty.http").new()
                local encode = ngx.encode_base64
                httpc:request_uri(os.getenv("ETCD_SERVER_URL") .. "/v3/kv/deleterange", {
                    method = "POST",
                    body = json.encode({
                        key = encode("/shenyu/register/instance/" .. ngx.var.server_addr .. ":9090"),
                        range_end = encode("/shenyu/register/instance/" .. ngx.var.server_addr .. ":9090a"),
                    }),
                })
                ngx.say("unregister successful")
            }
        }
    }
}
