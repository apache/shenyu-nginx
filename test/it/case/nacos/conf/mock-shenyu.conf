# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

worker_processes  1;
daemon off;
error_log /dev/stdout debug;

events {
    worker_connections 1024;
}

env APP_NAME;
env NACOS_SERVER_URL;

http {
    lua_shared_dict status 1m;

    server {
        listen 9090;
        location ~ /get {
            content_by_lua_block {
                ngx.say(ngx.var.server_addr)
            }
        }

        location = /register {
            content_by_lua_block {
                local json = require("cjson.safe")
                local httpc = require("resty.http").new()
                local base_url = os.getenv("NACOS_SERVER_URL")

                local resp, err = httpc:request_uri(base_url, {
                    method = "POST",
                    path = "/nacos/v1/auth/login",
                    query = "username=nacos&password=nacos",
                })
                if not resp then
                    ngx.say(err)
                    ngx.exit(500)
                end
                ngx.log(ngx.INFO, resp.body)
                if resp.status ~= 200 then
                    ngx.say(resp.body)
                    ngx.exit(500)
                end
                local token = json.decode(resp.body).accessToken

                local resp, err = httpc:request_uri(base_url, {
                    method = "POST",
                    path = "/nacos/v1/ns/service",
                    query = "serviceName=shenyu-instances&groupName=DEFAULT_GROUP&namespaceId=",
                })
                if not resp then
                    ngx.say(err)
                    ngx.exit(500)
                end
                ngx.log(ngx.INFO, resp.body)

                local instance = "serviceName=shenyu-instances&groupName=DEFAULT_GROUP&namespaceId=&ip=" .. ngx.var.server_addr .. "&port=9090"
                local resp, err = httpc:request_uri(base_url, {
                    method = "POST",
                    path = "/nacos/v1/ns/instance",
                    query = instance,
                })
                if not resp then
                    ngx.say(err)
                    ngx.exit(500)
                end
                ngx.log(ngx.INFO, resp.body)
                if resp.status ~= 200 then
                    ngx.say(resp.body)
                    ngx.exit(500)
                end
                local shdict = ngx.shared.status
                if shdict:get("beat") then
                    ngx.say("registered")
                    return
                end
                shdict:set("beat", true)

                local function beat(premature)
                    local shdict = ngx.shared.status
                    local flag = shdict:get("beat")
                    if not flag or premature or ngx.worker.exiting() then
                        return
                    end
                    local httpc = require("resty.http").new()
                    local resp, err = httpc:request_uri(base_url, {
                        method = "PUT",
                        path = "/nacos/v1/ns/instance/beat",
                        query = instance .. "&beat="
                    })
                    if not resp then
                        ngx.say(err)
                        return
                    end
                    ngx.log(ngx.INFO, resp.body)

                    local ok, err = ngx.timer.at(3, beat)
                    if not ok then
                        ngx.log(ngx.ERR, "failed to create timer: ", err)
                        return
                    end
                end

                local ok, err = ngx.timer.at(0, beat)
                if not ok then
                    ngx.log(ngx.ERR, "failed to create timer: ", err)
                end
                ngx.say("register successful")
            }
        }

        location = /unregister {
            content_by_lua_block {
                local shdict = ngx.shared.status
                shdict:delete("beat")
                ngx.say("unregister successful")
            }
        }
    }
}
